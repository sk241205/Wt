1) Write AJAX program to read contact.dat file and print the contents of the file in a tabular

format when the user clicks on print button. Contact.dat file should contain srno, name, residence

number, mobile

number, Address.

<!-- Page 1 name- Slip12.html -->

<!DOCTYPE html>

<html>

<head>

<title>Contact Information</title>

<script>

function loadContacts() {

const xhr = new XMLHttpRequest();

xhr.onreadystatechange = function() {

if (this.readyState == 4 && this.status == 200) {

displayContacts(this.responseText);

}


};

xhr.open("GET", "contact.dat", true);

xhr.send();

}

function displayContacts(data) {

const contacts = data.split('\n');

let tableHTML = "<table border='1'><tr><th>SNo</th><th>Name</th><th>Residence

No</th><th>Mobile No</th><th>Address</th></tr>";

for (let contact of contacts) {

if (contact.trim() !== "") {

const fields = contact.split(',');

tableHTML += `<tr>

<td>${fields[0]}</td>

<td>${fields[1]}</td>

<td>${fields[2]}</td>

<td>${fields[3]}</td>

<td>${fields[4]}</td>

</tr>`;

}

}

tableHTML += "</table>";

document.getElementById("contactTable").innerHTML = tableHTML;

}

</script>

</head>

<body>

<h1>Contact Information</h1>

<button onclick="loadContacts()">Print Contacts</button>

<div id="contactTable"></div>

</body>

</html>

<!-- Page 2 name- contact.dat - ->

1,John Doe,022-1234567,9876543210,123 Main St

2,Jane Smith,022-7654321,9876123450,456 Oak Ave

3,Bob Johnson,022-1122334,8765432109,789 Pine Rd

2) Create ‘heights-and-weights’ Data set . Build a linear regression model by identifying

independent and target variable. Split the variables into training and testing sets and print them.

Build a simple linear regression model for predicting purchases.

import numpy as np

import pandas as pd
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression

from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

num_samples = 1000

heights = np.random.normal(170, 10, num_samples)

weights = 0.5 * heights + 30 + np.random.normal(0, 5, num_samples)

data = pd.DataFrame({'Height': heights, 'Weight': weights})

X = data[['Height']]

y = data['Weight']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()

model.fit(X_train, y_train)

train_rmse = np.sqrt(mean_squared_error(y_train, model.predict(X_train)))

test_rmse = np.sqrt(mean_squared_error(y_test, model.predict(X_test)))

print("Training RMSE:", train_rmse)

print("Testing RMSE:", test_rmse)

plt.scatter(X_test, y_test, color='green')

plt.plot(X_train, model.predict(X_train), color='red', linewidth=3)

plt.title('Regression(Height vs Weight)')

plt.xlabel('Height')

plt.ylabel('Weight')

plt.show()

